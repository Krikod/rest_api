# app/config/config.yml

imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    jms_serializer.camel_case_naming_strategy.class: JMS\Serializer\Naming\IdenticalPropertyNamingStrategy
    # La config. de tels params est simple aussi bien avec le sérialiseur de base de Sf qu’avec
    # le JMSSerializer. On va donc garder la config. par défaut du sérialiseur de Sf qui est de conserver
    # le même nom que celui des attributs de nos objets. => On va ensuite désactiver le sérializer natif de Sf.
    # Vu qu’il n’est pas activé par défaut, on peut retirer la config. associée ou passer sa valeur à false.
    # -> voir Framework: serializer.

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    serializer:
        enabled: false
        # A false, FOSRestBundle va utiliser directement le sérialiseur fournit par JMSSerializerBundle.

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# On désactive l’ajout automatique de l'attribut _format des routes (FOSRestBundle introduit automatiquement
#ce paramètre afin de gérer le format des réponses).
# Puis on active le "listener" (ViewResponseListener) de FOSRestBundle qui permet, à l’instar de Symfony
# via l’annotation Template du SensioFrameworkExtraBundle, de renvoyer juste une instance de View et laisser
# le bundle appeler le gestionnaire de vue lui-même.
# Ensuite configurer le format listener de FOSRestBundle pour que toutes les URL renvoient du JSON.
fos_rest:
    routing_loader:
        include_format: false
# => Pour faire gérer les exceptions par l'exception listener de FOSRestBundle (à la place du listener du bundle Twig,
# qui est alors automatiquement désactivé):
# => Les messages correspondent à ceux définis dans les exceptions parce que l’app est en mode dév.
# En prod, ils sont remplacés par ***Internal Server Error***.
    exception:
        enabled: true
        # => Pour conserver les messages des exceptions même en production (marche pas... todo exceptions):
        messages:
            'Symfony\Component\Security\Core\Exception\BadCredentialsException': true
            'Symfony\Component\HttpKernel\Exception\HttpException': true
        # => Pour associer bon code aux erreurs d'authentification (401 Unauthorized) -
        # À l’instar du tableau messages, rajouter tableau codes avec comme CLES
        # les exceptions et comme VALEUR les codes de statut associés.
        # => ne marche qu'avec app_dev.php, pas app.php !!!!!
        codes:
            'Symfony\Component\Security\Core\Exception\BadCredentialsException': 401
    view:
        view_response_listener: true
# on déclare le format des réponses supportées, sans view (mais ces 2 formats ont déjà
# activés par défaut (inscrits pour clarté)
        formats:
            json: true
            xml: true
    format_listener:
        rules:
# priorité entre ces formats, le comportement du serveur si aucun format n’est choisi par le client (prefer_extension: false)
# formats supportés définis dans "priorities": on peut rajouter 'xml'
            - { path: '^/', priorities: ['json', 'xml'], fallback_format: 'json', prefer_extension: false }
# ==> pour toutes les URL (path: ^/), le format prioritaire est le JSON (priorities: ['json']) et si aucun format n’est
# demandé par le client, il faudra utiliser le JSON quand même (fallback_format: 'json').
# => C’est maintenant au client d’informer le serveur sur le ou les formats qu’il préfère.
# ORDRE important! -> ici JSON choisi par le serveur si requête ne spécifie aucun format..

# Configuration à ajouter pour désactiver le body listener (=false):
    body_listener:
        enabled: true
    # !!! Pour que FOSRestBundle puisse traiter (gérer) l'annotation QueryParam (-> mis sur actions des contrôleurs),
    # on active ce listener dédié => on peut donc paginer liste de lieux / trier les réponses (contrôleur Place)
    param_fetcher_listener:
        enabled: true
# Sérialiser les attributs même s’ils sont nuls -> Le comportement par défaut de JMSSerializer est
# d’ignorer tous les attributs nuls d’un objet. Ce fonctionnement peut entrainer des réponses avec des
# payloads partiels manquant certains attributs. Pour éviter ce problème, FOSRestBundle propose un
# paramètre de configuration pour forcer JMSSerializer à sérialiser les attributs nuls.
    serializer:
        serialize_null: true

# La sérialisation des dates dans php est supportée nativement par JMSSerializerBundle.
# On peut, en plus, personnaliser ce comportement.
jms_serializer:
    handlers:
        datetime:
            default_format: "Y-m-d\\TH:i:sP"
            # L’attribut default_format prend en paramètre le même format que la fonction date de PHP.
            default_timezone: "UTC"
            # La valeur "Y-m-d\\TH:i:sP" désigne le format ISO 8601 pour les dates.

# Malgré la config, le fichier ***serialization.yml*** décrivant les règles de sérialisation,
# est encore ignoré par JMSSerializerBundle. Fichier mal placé car dans une config. par défaut.
# =>  Pour un bundle, les fichiers décrivant la sérialisation doivent être dans le dossier
# src/NomDuBundle/Resources/config/serializer/-> Entity.Place.yml pour l'entity Place.
# => config/serialization.yml remplacé par config/serialization/Entity.Place.yml etc.