# app/config/config.yml

imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    serializer:
        enabled: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# On désactive l’ajout automatique de l'attribut _format des routes (FOSRestBundle introduit automatiquement
#ce paramètre afin de gérer le format des réponses).
# Puis on active le "listener" (ViewResponseListener) de FOSRestBundle qui permet, à l’instar de Symfony
# via l’annotation Template du SensioFrameworkExtraBundle, de renvoyer juste une instance de View et laisser
# le bundle appeler le gestionnaire de vue lui-même.
# Ensuite configurer le format listener de FOSRestBundle pour que toutes les URL renvoient du JSON.
fos_rest:
    routing_loader:
        include_format: false
    view:
        view_response_listener: true
# on déclare le format des réponses supportées, sans view (mais ces 2 formats osnt déjà
# activés par défaut (inscrits pour clarté)
        formats:
            json: true
            xml: true
    format_listener:
        rules:
# priorité entre ces formats, le comportement du serveur si aucun format n’est choisi par le client (prefer_extension: false)
# formats supportés définis dans "priorities": on peut rajouter 'xml'
            - { path: '^/', priorities: ['json', 'xml'], fallback_format: 'json', prefer_extension: false }
# ==> pour toutes les URL (path: ^/), le format prioritaire est le JSON (priorities: ['json']) et si aucun format n’est
# demandé par le client, il faudra utiliser le JSON quand même (fallback_format: 'json').
# => C’est maintenant au client d’informer le serveur sur le ou les formats qu’il préfère.
# ORDRE important! -> ici JSON choisi par le serveur si requête ne spécifie aucun format..

# Configuration à ajouter pour désactiver le body listener (=false):
    body_listener:
        enabled: true